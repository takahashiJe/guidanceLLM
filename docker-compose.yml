# docker-compose.yml （更新版：フェーズ2）
version: '3.8'

services:
  # =========================
  # 依存ミドルウェア
  # =========================
  db:
    profiles: ["api", "worker", "tools"]
    image: postgis/postgis:15-3.4
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [backend_network]

  redis:
    profiles: ["api", "worker"]
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [backend_network]

  # =========================
  # GPU を使うサービス（LLMのみ）
  # =========================
  ollama:
    profiles: ["worker"]
    image: ollama/ollama:latest
    env_file: .env
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    gpus: all
    networks: [backend_network]
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:11434/api/tags || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  osrm-car:
    profiles: ["worker"]
    image: osrm/osrm-backend:latest
    ports:
      - "5000:5000"
    volumes:
      - ./backend/worker/data/map/car:/data
    command: osrm-routed --algorithm mld /data/japan-latest.osrm
    networks: [backend_network]

  osrm-foot:
    profiles: ["worker"]
    image: osrm/osrm-backend:latest
    ports:
      - "5001:5000"
    volumes:
      - ./backend/worker/data/map/foot:/data
    command: osrm-routed --algorithm mld /data/japan-latest-foot.osrm
    networks: [backend_network]

  # =========================
  # アプリ本体
  # =========================
  api_gateway:
    profiles: ["api"]
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    env_file: .env
    environment:
      - PYTHONPATH=/app/backend
      - APP_ENV=${APP_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - CORS_ALLOW_ORIGINS=${CORS_ALLOW_ORIGINS}
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks: [backend_network, frontend_network]

  worker:
    profiles: ["worker"]
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    env_file: .env
    environment:
      - PYTHONPATH=/app/backend
      - APP_ENV=${APP_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - OLLAMA_HOST=${OLLAMA_HOST}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    depends_on:
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      osrm-car:
        condition: service_started
      osrm-foot:
        condition: service_started
    # コマンドは本番 compose で指定（開発時は必要に応じて）
    networks: [backend_network]

  frontend:
    profiles: ["dev", "api"]
    build:
      context: ./frontend
    ports:
      - "8501:8501"
    depends_on:
      - api_gateway
    networks: [frontend_network]

  # =========================
  # 初期化ツール（起動順固定）
  # =========================
  db-init:
    profiles: ["tools"]
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
    command: >
      bash -lc "
        python -m pip install alembic &&
        python backend/worker/app/init_db_script.py
      "
    networks: [backend_network]

  vectorstore-init:
    profiles: ["tools"]
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    env_file: .env
    depends_on:
      db-init:
        condition: service_completed_successfully
    volumes:
      - ./backend:/app/backend
    command: ["python", "backend/scripts/01_build_knowledge_graph.py"]
    networks: [backend_network]

volumes:
  postgres_data:
  ollama_data:

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
