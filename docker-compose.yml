# docker-compose.yml （更新版：フェーズ2）
version: '3.8'

services:
  # =========================
  # 依存ミドルウェア
  # =========================
  db:
    image: pgvector/pgvector:pg15
    container_name: ${COMPOSE_PROJECT_NAME:-guidancellm}-db-1
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-guidance}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20
    profiles: ["*", "api", "worker"]

  redis:
    profiles: ["api", "worker"]
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - default

  # =========================
  # GPU を使うサービス（LLMのみ）
  # =========================
  ollama:
    profiles: ["worker"]
    image: ollama/ollama:latest
    env_file: .env
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    gpus: all
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "ollama list >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  osrm-car:
    profiles: ["worker"]
    image: osrm/osrm-backend:latest
    ports:
      - "5000:5000"
    volumes:
      - ./backend/worker/data/map/car:/data
    command: osrm-routed --algorithm mld /data/japan-latest.osrm
    networks:
      - default

  osrm-foot:
    profiles: ["worker"]
    image: osrm/osrm-backend:latest
    ports:
      - "5001:5000"
    volumes:
      - ./backend/worker/data/map/foot:/data
    command: osrm-routed --algorithm mld /data/japan-latest-foot.osrm
    networks:
      - default

  # =========================
  # アプリ本体
  # =========================
  api_gateway:
    profiles: ["api"]
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    env_file: .env
    environment:
      - PYTHONPATH=/app/backend
      - APP_ENV=${APP_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - CORS_ALLOW_ORIGINS=${CORS_ALLOW_ORIGINS}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      ollama:
        condition: service_started
      db-init:
        condition: service_completed_successfully
    networks:
      - default

  worker:
    profiles: ["worker"]
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    env_file: .env
    environment:
      - PYTHONPATH=/app/backend
      - APP_ENV=${APP_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - OLLAMA_HOST=${OLLAMA_HOST}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    depends_on:
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      osrm-car:
        condition: service_started
      osrm-foot:
        condition: service_started
    # コマンドは本番 compose で指定（開発時は必要に応じて）
    networks:
      - default

  frontend:
    profiles: ["dev", "api"]
    build:
      context: ./frontend
    ports:
      - "8501:8501"
    depends_on:
      - api_gateway
    networks:
      - default

  # =========================
  # 初期化ツール（起動順固定）
  # =========================
  db-init:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ${COMPOSE_PROJECT_NAME:-guidancellm}-db-init-1
    environment:
      # DB接続はコンテナ名 db を使う
      DATABASE_URL: "postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-guidance}"
      # （必要なら）その他 env をここへ
    volumes:
      - ./backend:/app/backend
    depends_on:
      db:
        condition: service_healthy
    profiles: ["*", "api", "worker"]
    command: >
      bash -lc "
        pip install --no-cache-dir pgvector alembic &&
        python worker/app/init_db_script.py
      "
    networks:
      - default

  vectorstore-init:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: ${COMPOSE_PROJECT_NAME:-guidancellm}-vectorstore-init
    container_name: ${COMPOSE_PROJECT_NAME:-guidancellm}-vectorstore-init-1
    command: >
      bash -lc "python /app/backend/scripts/01_build_knowledge_graph.py"
    environment:
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: "/app/backend"
      OLLAMA_HOST: "http://ollama:11434"
      EMBED_MODEL: "mxbai-embed-large"
      KNOWLEDGE_LANGS: "ja,en,zh"
      KNOWLEDGE_BASE_DIR: "/app/backend/worker/data/knowledge"
      VECTORSTORE_BASE_DIR: "/app/backend/worker/data/vectorstore"
      CHROMA_TELEMETRY_DISABLED: "1"
    depends_on:
      - ollama
      - db
    volumes:
      - ./backend:/app/backend
    profiles: ["*", "api", "worker"]
    networks:
      - default
    restart: "no"

volumes:
  postgres_data:
  ollama_data:
  pgdata:

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME:-guidancellm}_default